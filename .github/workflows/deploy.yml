name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      
      - name: Check for existing S3 bucket in wrong region
        id: check_bucket
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="lambda-deployment-${ACCOUNT_ID}"
          
          # Check if bucket exists in any region
          if aws s3api head-bucket --bucket ${BUCKET_NAME} 2>/dev/null; then
            echo "Bucket exists, checking region..."
            
            # Get bucket location
            BUCKET_REGION=$(aws s3api get-bucket-location --bucket ${BUCKET_NAME} --query LocationConstraint --output text)
            
            # If null or empty, it's in us-east-1
            if [ "$BUCKET_REGION" == "None" ] || [ -z "$BUCKET_REGION" ]; then
              BUCKET_REGION="us-east-1"
            fi
            
            echo "Bucket region: ${BUCKET_REGION}"
            
            if [ "$BUCKET_REGION" != "ap-south-1" ]; then
              echo "Bucket exists in wrong region (${BUCKET_REGION}), will delete and recreate"
              echo "wrong_region=true" >> $GITHUB_OUTPUT
              echo "bucket_name=${BUCKET_NAME}" >> $GITHUB_OUTPUT
            else
              echo "Bucket exists in correct region (ap-south-1)"
              echo "wrong_region=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Bucket does not exist, will create new"
            echo "wrong_region=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Delete bucket in wrong region if needed
        if: steps.check_bucket.outputs.wrong_region == 'true'
        run: |
          BUCKET_NAME=${{ steps.check_bucket.outputs.bucket_name }}
          echo "Deleting bucket ${BUCKET_NAME} in wrong region..."
          
          # Empty the bucket first
          aws s3 rm s3://${BUCKET_NAME} --recursive
          
          # Delete the bucket
          aws s3api delete-bucket --bucket ${BUCKET_NAME}
          
          echo "Bucket deleted successfully"
          
          # Wait a moment for deletion to propagate
          sleep 10
      
      - name: Prepare Lambda package
        run: |
          chmod +x prepare-lambda.sh
          ./prepare-lambda.sh
      
      - name: Verify S3 bucket and Lambda package
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET_NAME="lambda-deployment-${ACCOUNT_ID}"
          
          echo "Verifying S3 bucket exists in ap-south-1..."
          aws s3api get-bucket-location --bucket ${BUCKET_NAME}
          
          echo "Listing bucket contents..."
          aws s3 ls s3://${BUCKET_NAME}/
          
          echo "Verifying Lambda package exists..."
          aws s3api head-object --bucket ${BUCKET_NAME} --key text-to-sql-chatbot.zip || echo "Lambda package not found!"
      
      - name: Deploy CloudFormation stack
        run: |
          # Check if stack exists and is in ROLLBACK_COMPLETE state
          if aws cloudformation describe-stacks --stack-name text-to-sql-chatbot --region ap-south-1 2>/dev/null | grep -q "ROLLBACK_COMPLETE"; then
            echo "Stack is in ROLLBACK_COMPLETE state, deleting it first..."
            aws cloudformation delete-stack --stack-name text-to-sql-chatbot --region ap-south-1
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name text-to-sql-chatbot --region ap-south-1
          fi
          
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name text-to-sql-chatbot \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              SecretName=text-to-sql-chatbot-secret-key \
            --region ap-south-1
      
      - name: Get deployment outputs
        id: outputs
        run: |
          OUTPUTS=$(aws cloudformation describe-stacks --stack-name text-to-sql-chatbot --query "Stacks[0].Outputs" --output json --region ap-south-1)
          echo "outputs<<EOF" >> $GITHUB_ENV
          echo "$OUTPUTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Display outputs in table format for readability
          aws cloudformation describe-stacks --stack-name text-to-sql-chatbot --query "Stacks[0].Outputs" --output table --region ap-south-1
          
          # Extract API endpoint for easy access
          API_ENDPOINT=$(echo "$OUTPUTS" | jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue')
          echo "API Endpoint: $API_ENDPOINT"
      
      - name: Display deployment results
        run: |
          echo "Deployment completed successfully!"
          echo "API Endpoint: $(echo '${{ env.outputs }}' | jq -r '.[] | select(.OutputKey=="ApiEndpoint") | .OutputValue')"
      
      - name: Troubleshooting on failure
        if: failure()
        run: |
          echo "Deployment failed. Collecting troubleshooting information..."
          
          # Get stack events for debugging
          aws cloudformation describe-stack-events --stack-name text-to-sql-chatbot --region ap-south-1 --query "StackEvents[?ResourceStatus=='CREATE_FAILED' || ResourceStatus=='UPDATE_FAILED'].{Resource:LogicalResourceId, Status:ResourceStatus, Reason:ResourceStatusReason}" --output table
